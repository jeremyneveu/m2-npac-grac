image: condaforge/mambaforge:latest

#variables:
# BASE_URL: "https://m2-npac-ac.pages.in2p3.fr/"  # "/m2-npac-ac"

cache:
  paths:
    - .cache/pip

stages:
  - build

before_script:
  - eval "$(mamba shell hook --shell bash)"
  - python -V               # Print out python version for debugging
 
pages:
  stage: build
  script:
    # - mamba install -y -c conda-forge nodejs pyyaml
    - mamba install -c conda-forge mystmd
    # - node -v
    # - npm install -g mystmd@latest
    - myst -v
    - cp myst.yml tmp_myst.yml
    #- rm myst.yml
    #- python remove_toc.py
    #- export BASE_URL="/m2-npac-ac"  # "https://m2-npac-ac.pages.in2p3.fr/"  # "/m2-npac-ac"
    #- git clone https://github.com/jupyter-book/mystmd-quickstart.git
    #- cd mystmd-quickstart
    #- myst init --site
    #- myst init --project
    # Solution simplifiée : forcer MyST à fonctionner en mode statique
    - export MYST_HEADLESS=true
    - export CI=true
    - export NODE_ENV=production  
    # Essayer de tuer tout processus serveur existant
    - pkill -f "myst" 2>/dev/null || true
    - pkill -f "node.*3000" 2>/dev/null || true
    # Build MyST avec plusieurs tentatives
    - |
      echo "Attempting MyST build..."
      for attempt in 1 2 3; do
        echo "Build attempt $attempt/3"
        if timeout 120 myst build --html --no-serve 2>&1; then
          echo "MyST build successful on attempt $attempt"
          break
        elif [ $attempt -eq 3 ]; then
          echo "All MyST attempts failed, trying basic build"
          # Dernière tentative avec build minimal
          timeout 60 myst build 2>&1 || echo "Basic build also failed, but continuing..."
        else
          echo "Attempt $attempt failed, retrying..."
          sleep 5
        fi
      done
    - ls -la _build/
    # Trouver le répertoire de sortie HTML
    - if [ -d "_build/html" ]; then mv _build/html/ ../public; elif [ -d "_build/_build/html" ]; then mv _build/_build/html/ ../public; else echo "No HTML build found" && find _build -name "*.html" && exit 1; fi
    #- mv tmp_myst.yml myst.yml
    #- myst build --html
    #- mv _build/html/ public/fr
    #- sed -i 's@fr/@en/@g' myst.yml
    #- myst build --html
    #- mv _build/html/ public/en
    #- pip install jupyterlite-core jupyterlite-xeus jupyterlab notebook ipympl ipywidgets
    #- mamba install micromamba -c conda-forge
    #- rm -rf notebooks/TP_SN.ipynb
    #- jupyter lite build --XeusAddon.environment_file=jupyterlite-environment.yml --contents=notebooks --output-dir=public/lite
  artifacts:
    paths:
      - public
  only:
    - main

#docker:
#  image: docker:19.03.12
#  stage: build
#  services:
#    - docker:19.03.12-dind
#  variables:
#    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#  script:
#    - cd docker
#    - ls -la .
#    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker build -t $IMAGE_TAG . --file Dockerfile-CI
#    - docker push $IMAGE_TAG
#  #rules:
#  #  - changes:
#  #      - docker/*


