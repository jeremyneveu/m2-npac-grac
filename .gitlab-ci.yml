image: condaforge/mambaforge:latest

#variables:
# BASE_URL: "https://m2-npac-ac.pages.in2p3.fr/"  # "/m2-npac-ac"

cache:
  paths:
    - .cache/pip

stages:
  - build

before_script:
  - eval "$(mamba shell hook --shell bash)"
  - python -V               # Print out python version for debugging
 
pages:
  stage: build
  variables:
    # Variables pour contourner les restrictions GitLab CI
    MYST_HEADLESS: "true"
    CI: "true"
    NODE_ENV: "production"
    # Désactiver les vérifications de serveur MyST
    MYST_BUILD_STATIC: "true"
    # Forcer le mode offline
    npm_config_prefer_offline: "true"
  script:
    # Installation alternative de MyST pour éviter les problèmes de serveur
    - mamba install -y -c conda-forge nodejs=18
    - npm install -g mystmd@1.1.49  # Version stable qui ne force pas le serveur
    # - mamba install -c conda-forge mystmd
    - myst -v
    - cp myst.yml tmp_myst.yml
    #- rm myst.yml
    #- python remove_toc.py
    #- export BASE_URL="/m2-npac-ac"  # "https://m2-npac-ac.pages.in2p3.fr/"  # "/m2-npac-ac"
    #- git clone https://github.com/jupyter-book/mystmd-quickstart.git
    #- cd mystmd-quickstart
    #- myst init --site
    #- myst init --project
    # Solution alternative : utiliser une version de MyST sans serveur ou bypass complet
    - |
      # Essayer différentes approches de build
      echo "Attempting MyST build with different strategies..."
      
      # Stratégie 1: Build avec redirection complète
      echo "Strategy 1: Full redirect build"
      if (myst build --html </dev/null &>/dev/null &) then
        MYST_PID=$!
        sleep 45
        kill -9 $MYST_PID 2>/dev/null || true
        wait $MYST_PID 2>/dev/null || true
        echo "Strategy 1 completed"
      fi
      
      # Vérifier si on a des fichiers
      if [ -d "_build/html" ] && [ "$(ls -A _build/html)" ]; then
        echo "Build successful with strategy 1"
      else
        echo "Strategy 1 failed, trying strategy 2: Build without server validation"
        # Stratégie 2: Modifier temporairement la config pour désactiver le serveur
        sed -i 's/template: book-theme/template: article-theme/g' myst.yml 2>/dev/null || true
        timeout 120 myst build --html &>/dev/null || echo "Build timeout reached (expected)"
        sed -i 's/template: article-theme/template: book-theme/g' myst.yml 2>/dev/null || true
      fi
    - ls -la _build/
    - ls -la _build/html
    # Trouver le répertoire de sortie HTML
    - mv _build/html/ ../public
    #- mv tmp_myst.yml myst.yml
    #- myst build --html
    #- mv _build/html/ public/fr
    #- sed -i 's@fr/@en/@g' myst.yml
    #- myst build --html
    #- mv _build/html/ public/en
    #- pip install jupyterlite-core jupyterlite-xeus jupyterlab notebook ipympl ipywidgets
    #- mamba install micromamba -c conda-forge
    #- rm -rf notebooks/TP_SN.ipynb
    #- jupyter lite build --XeusAddon.environment_file=jupyterlite-environment.yml --contents=notebooks --output-dir=public/lite
  artifacts:
    paths:
      - public
  only:
    - main

#docker:
#  image: docker:19.03.12
#  stage: build
#  services:
#    - docker:19.03.12-dind
#  variables:
#    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#  script:
#    - cd docker
#    - ls -la .
#    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker build -t $IMAGE_TAG . --file Dockerfile-CI
#    - docker push $IMAGE_TAG
#  #rules:
#  #  - changes:
#  #      - docker/*


