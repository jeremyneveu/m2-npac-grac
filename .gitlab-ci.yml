image: condaforge/mambaforge:latest

#variables:
# BASE_URL: "https://m2-npac-ac.pages.in2p3.fr/"  # "/m2-npac-ac"

cache:
  paths:
    - .cache/pip

stages:
  - build

before_script:
  - eval "$(mamba shell hook --shell bash)"
  - python -V               # Print out python version for debugging
 
pages:
  stage: build
  script:
    # - mamba install -y -c conda-forge nodejs pyyaml
    - mamba install -c conda-forge mystmd
    # - node -v
    # - npm install -g mystmd@latest
    - myst -v
    - cp myst.yml tmp_myst.yml
    #- rm myst.yml
    #- python remove_toc.py
    #- export BASE_URL="/m2-npac-ac"  # "https://m2-npac-ac.pages.in2p3.fr/"  # "/m2-npac-ac"
    #- git clone https://github.com/jupyter-book/mystmd-quickstart.git
    #- cd mystmd-quickstart
    #- myst init --site
    #- myst init --project
    # Approche alternative - build avec jupyter-book si MyST pose problème  
    - pip install jupyter-book
    # Créer un _config.yml minimal pour jupyter-book en cas de besoin
    - |
      cat > _config.yml << EOF
      title: 'M2 NPAC Cosmology'
      execute:
        execute_notebooks: off
      EOF
    # Générer _toc.yml automatiquement depuis myst.yml
    - |
      python3 << 'PYTHON_SCRIPT'
      import yaml
      import json
      
      # Lire le fichier myst.yml
      with open('myst.yml', 'r', encoding='utf-8') as f:
          myst_config = yaml.safe_load(f)
      
      def convert_myst_toc_to_jb(toc_items, is_root=False):
          """Convertit une structure TOC MyST vers Jupyter Book"""
          jb_items = []
          
          for item in toc_items:
              if isinstance(item, dict):
                  jb_item = {}
                  
                  if 'file' in item:
                      # Supprimer l'extension .md pour jupyter-book
                      file_path = item['file'].replace('.md', '').replace('.ipynb', '')
                      jb_item['file'] = file_path
                  
                  if 'title' in item:
                      jb_item['title'] = item['title']
                  
                  if 'children' in item and item['children']:
                      jb_item['sections'] = convert_myst_toc_to_jb(item['children'])
                  
                  jb_items.append(jb_item)
              elif isinstance(item, str):
                  # Simple file reference
                  file_path = item.replace('.md', '').replace('.ipynb', '')
                  jb_items.append({'file': file_path})
          
          return jb_items
      
      # Extraire la TOC de MyST
      myst_toc = myst_config.get('toc', [])
      
      # Créer la structure Jupyter Book
      jb_config = {
          'format': 'jb-book',
          'root': 'README',
          'chapters': []
      }
      
      # Convertir chaque élément de la TOC MyST
      if myst_toc:
          # Le premier élément est généralement README, on le saute
          toc_items = myst_toc[1:] if len(myst_toc) > 1 and myst_toc[0].get('file') == 'README.md' else myst_toc
          jb_config['chapters'] = convert_myst_toc_to_jb(toc_items)
      
      # Écrire le fichier _toc.yml
      with open('_toc.yml', 'w', encoding='utf-8') as f:
          yaml.dump(jb_config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
      
      print("Generated _toc.yml from myst.yml structure")
      PYTHON_SCRIPT
    # Essayer MyST d'abord, puis jupyter-book en fallback
    - (timeout 60 myst build --html 2>/dev/null && echo "MyST build successful") || (echo "MyST failed, trying jupyter-book" && jupyter-book build . --path-output _build)
    - ls -la _build/
    # Trouver le répertoire de sortie HTML
    - if [ -d "_build/html" ]; then mv _build/html/ ../public; elif [ -d "_build/_build/html" ]; then mv _build/_build/html/ ../public; else echo "No HTML build found" && find _build -name "*.html" && exit 1; fi
    #- mv tmp_myst.yml myst.yml
    #- myst build --html
    #- mv _build/html/ public/fr
    #- sed -i 's@fr/@en/@g' myst.yml
    #- myst build --html
    #- mv _build/html/ public/en
    #- pip install jupyterlite-core jupyterlite-xeus jupyterlab notebook ipympl ipywidgets
    #- mamba install micromamba -c conda-forge
    #- rm -rf notebooks/TP_SN.ipynb
    #- jupyter lite build --XeusAddon.environment_file=jupyterlite-environment.yml --contents=notebooks --output-dir=public/lite
  artifacts:
    paths:
      - public
  only:
    - main

#docker:
#  image: docker:19.03.12
#  stage: build
#  services:
#    - docker:19.03.12-dind
#  variables:
#    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#  script:
#    - cd docker
#    - ls -la .
#    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker build -t $IMAGE_TAG . --file Dockerfile-CI
#    - docker push $IMAGE_TAG
#  #rules:
#  #  - changes:
#  #      - docker/*


